#!/usr/bin/env ruby

# Copyright (c) 2015 Alexandra Figlovskaya <fglval@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

require 'optparse'
options = {}
OptionParser.new do |opts|
  opts.on('-h', '--help','display this message and exit') do
    puts opts
    exit 0
  end

  options[:micro_avg] = false
  opts.on('-m', '--micro-avg','disable micro averaged P/R/F1 output') do
    options[:micro_avg] = true
  end

  options[:macro_avg] = false
  opts.on('-r', '--macro-avg','disable macro averaged P/R/F1 output') do
    options[:macro_avg] = true
  end

  options[:statistics] = false
  opts.on('-s', '--statistics-per-class','disable output of per-class') do
    options[:statistics] = true
  end

  options[:accuracy] = false
  opts.on('-a', '--accuracy','disable output of per-class P/R/F1') do
    options[:accuracy] = true
  end

  opts.separator " "
end.parse!

golden_tags = IO.read(ARGV[0]).split("\n")
result_tags = IO.read(ARGV[1]).split("\n")
if golden_tags.length != result_tags.length
  exit 1
end

tag2golden_cnt = {}
tag2result_cnt = {}
tag2TP_cnt = {}
all_precision = 0
all_recall = 0

for i in 0..golden_tags.length-1 do
  gt = golden_tags[i].to_i
  rt = result_tags[i].to_i
#  puts gt, rt
  tag2golden_cnt[gt] = tag2golden_cnt[gt].to_i + 1
  tag2result_cnt[rt] = tag2result_cnt[rt].to_i + 1
  tag2TP_cnt[rt] = tag2TP_cnt[rt].to_i + (gt == rt ? 1 : 0)

  # make sure hash cell exists
  tag2TP_cnt[gt] = tag2TP_cnt[gt].to_i + 0
  tag2result_cnt[gt] = tag2result_cnt[gt].to_i + 0
end

all_tp = 0
all_f1 = 0
res_tag2TP_cnt = tag2TP_cnt.sort_by { |key, value| key }
res_tag2TP_cnt.each do |t, tp|
  p = tp.to_f / tag2result_cnt[t]
  r = tp.to_f / tag2golden_cnt[t]
  f1 = 2*p*r / (p+r)
  if !options[:statistics]
    puts "Class  %-6s P, R, F1:  %-6.4g (%5s/%-5s),  %-6.4g (%5s/%-5s),  %-6.4g" \
      % [t, p, tp, tag2result_cnt[t], r, tp, tag2golden_cnt[t], f1]
  end
  all_precision += p
  all_recall += r
  all_tp += tp
  all_f1 += f1
end

all_rt = 0
tag2result_cnt.each { |tag, rt|
  all_rt += rt
}

all_gt = 0
tag2golden_cnt.each { |tag, gt|
  all_gt += gt
}

if !options[:accuracy]
  accuracy = all_tp.to_f / all_rt.to_f
  puts "Accuracy              :  %-6.4g (%5s/%-5s)" % [accuracy, all_tp, all_rt]
end

if !options[:micro_avg]
  micro_avg_precision = all_tp.to_f / all_rt.to_f
  micro_avg_recall = all_tp.to_f / all_gt.to_f
  micro_avg_f1 = 2*micro_avg_precision*micro_avg_recall / (micro_avg_precision+micro_avg_recall)
  puts "Micro average P, R, F1:  %-6.4g (%5s/%-5s),  %-6.4g (%5s/%-5s),  %-6.4g" \
    % [micro_avg_precision, all_tp, all_rt, micro_avg_recall, all_tp, all_gt, micro_avg_f1]
end

if !options[:macro_avg] && tag2TP_cnt.size > 0
  macro_avg_precision = all_precision / tag2TP_cnt.size
  macro_avg_recall = all_recall / tag2TP_cnt.size
  macro_avg_f1 = all_f1 / tag2TP_cnt.size
  puts "Macro average P, R, F1:  %-20.4g,  %-20.4g,  %-6.4g" \
    % [macro_avg_precision, macro_avg_recall, macro_avg_f1]
end

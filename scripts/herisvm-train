#!/usr/bin/env bash

# Copyright (c) 2015 Alexandra Figlovskaya <fglval@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# variables settable by user
: ${SVM_TRAIN_CMD:=svm-train}
: ${SVM_PREDICT_CMD:=svm-predict}

############################################################
set -e
export LC_ALL=C

sig_handler (){
    on_exit
    trap - "$1"
    kill -"$1" $$
}

on_exit(){
    show_stderr
    if test -z "$debug"; then
	rm -rf "$tmp_dir"
    else
	echo "Temporary files are here $tmp_dir" 1>&2
    fi
}

show_stderr (){
    for i in `seq $last`; do
	#
	fn="$tmp_dir/train_stderr${i}"
	if test -s "$fn"; then
	    echo "---- train stderr $i ----" 1>&2
	    cat -- "$fn" 1>&2
	fi
	#
	fn="$tmp_dir/predict_stderr${i}"
	if test -s "$fn"; then
	    echo "---- predict stderr $i ----" 1>&2
	    cat -- "$fn" 1>&2
	fi
    done
}

wait_all (){
    local i
    local ex
    ex=0
    for i in `seq $last`; do
	if wait ${pid[$i]}; then
	    :
	else
	    ex=$?
	fi
    done
    return "$ex"
}

usage(){
    cat 1>&2 <<'EOF'
usage: herisvm-train [OPTIONS] training_set -- SVM_TRAIN_OPTIONS

OPTIONS:
      -h                   help message

      -v n                 n-fold cross validation mode (mandatory option)

      -e testing_set       testing set for hold-out method

      -s                   all folds statistics
      -p <stat_opts>       options passed to heristat(1)
      -S <seed>            seed pseudo-random generator used for splitting
                           dataset into traing and testing parts.
                           The default is empty, which means
                           'split dataset randomly every invocation'
      -D                   debugging mode, keep temporary directory
                           after exiting

SVM_TRAIN_OPTIONS: options passed to svm-train(1) and alike

Examples: 
  Ex1: export SVM_TRAIN_CMD='liblinear-train'
       export SVM_PREDICT_CMD='liblinear-predict'
       herisvm-train -v 5 training_set.libsvm -- -s 4 -q
  Ex2: export SVM_TRAIN_CMD='fake-train'
       export SVM_PREDICT_CMD='fake-predict'
       herisvm-train -v 4 training_set.libsvm -- -f -a -k -e
EOF
}

while getopts De:hsS:p:v: f; do
    case "$f" in
	'?')
	    usage
	    exit 1;;
	h)
	    usage
	    exit 0;;
	v)
	    number_of_folds="$OPTARG";;
	e)
	    testing_set="$OPTARG";;
	p)
	    heristat_args="$heristat_args $OPTARG";;
	s)
	    fold_statistics="ok";;
	S)
	    seed="$OPTARG";;
	D)
	    debug=1;;
    esac
done
shift `expr $OPTIND - 1`

while test "$#" -gt 0; do
    case "$1" in
	--)
	    shift
	    break;;
	*)
	    print_sh=`printf '%q' "$1"`
	    files="$files $print_sh"
	    shift;;
    esac
done

trap "sig_handler INT"  INT
trap "on_exit" 0

if test -z "$number_of_folds" -a -z "$testing_set"; then
    echo 'Either -v or -e must be specified, run herisvm-train -h for details' 1>&2
    exit 1
fi

if test -z "$files"; then
    echo 'Training set is mandatory, run herisvm-train -h for details' 1>&2
    exit 1
fi

tmp_dir=`mktemp -d /tmp/svm.XXXXXX`

if test -n "$number_of_folds"; then
    eval "cat -- $files" | herisplit -c "$number_of_folds" -d "$tmp_dir" -s "$seed"
    last="$number_of_folds"
else
    eval "cat -- $files" > "$tmp_dir/train1.txt"
    cp "$testing_set" "$tmp_dir/test1.txt"
    last=1
fi

for i in `seq $last` #{1..$number_of_folds}
do
    ${SVM_TRAIN_CMD} "$@" "$tmp_dir/train$i.txt" "$tmp_dir/svm$i.bin" \
	2> "$tmp_dir/train_stderr${i}" \
	>  "$tmp_dir/train_stdout${i}" &
    pid[$i]=$!
done

wait_all

for i in `seq $last`
do
    ${SVM_PREDICT_CMD} "$tmp_dir/test$i.txt" "$tmp_dir/svm$i.bin" \
	"$tmp_dir/result${i}.txt" \
	2> "$tmp_dir/predict_stderr${i}" \
	>  "$tmp_dir/predict_stdout${i}" &
    pid[$i]=$!
done

wait_all

rm -f "$tmp_dir/golden_tags" "$tmp_dir/result.txt"

for i in `seq $last`
do
    if test -n "$fold_statistics"; then
	echo "Fold $i statistics"
    fi
    awk '{print $1}' "$tmp_dir/test$i.txt" > "$tmp_dir/golden_tags${i}"

    if test -n "$fold_statistics"; then
	heristat "$tmp_dir/golden_tags${i}" "$tmp_dir/result${i}.txt"
	echo ''
    fi

    cat "$tmp_dir/golden_tags${i}" >> "$tmp_dir/golden_tags"
    cat "$tmp_dir/result${i}.txt"  >> "$tmp_dir/result.txt"
done

echo 'Total statistics'
heristat $heristat_args "$tmp_dir/golden_tags" "$tmp_dir/result.txt"

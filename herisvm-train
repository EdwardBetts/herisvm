#!/usr/bin/env bash

# variables settable by user
: ${SVM_TRAIN_CMD:=svm-train}
: ${SVM_PREDICT_CMD:=svm-predict}

############################################################
set -e
export LC_ALL=C

usage(){
    cat 1>&2 <<'EOF'
usage: svm [OPT]
HG_OPTS:
      -v n: n-fold cross validation mode
      -s svm_type : set type of SVM (default 0)
	        0 -- C-SVC
	        1 -- nu-SVC
	        2 -- one-class SVM
	        3 -- epsilon-SVR
	        4 -- nu-SVR
      -t kernel_type : set type of kernel function (default 2)
	        0 -- linear: u'*v
	        1 -- polynomial: (gamma*u'*v + coef0)^degree
	        2 -- radial basis function: exp(-gamma*|u-v|^2)
	        3 -- sigmoid: tanh(gamma*u'*v + coef0)
	        4 -- precomputed kernel (kernel values in training_set_file)
      -d degree : set degree in kernel function (default 3)
      -g gamma : set gamma in kernel function (default 1/num_features)
      -r coef0 : set coef0 in kernel function (default 0)
      -c cost : set the parameter C of C-SVC, epsilon-SVR, and nu-SVR (default 1)
      -n nu : set the parameter nu of nu-SVC, one-class SVM, and nu-SVR (default 0.5)
      -p epsilon : set the epsilon in loss function of epsilon-SVR (default 0.1)
      -m cachesize : set cache memory size in MB (default 100)
      -e epsilon : set tolerance of termination criterion (default 0.001)
      -h shrinking : whether to use the shrinking heuristics, 0 or 1 (default 1)
      -b probability_estimates : whether to train a SVC or SVR model for probability estimates, 0 or 1 (default 0)
      -w weight : set the parameter C of class i to weight*C, for C-SVC (default 1)
         (Here our script is incompatible with svm-train)
      -q : quiet mode (no outputs)

Example: 
EOF
}

while getopts b:c:d:e:g:h:m:n:qp:r:s:t:v:w: f; do
    case "$f" in
	'?')
	    usage
	    exit 1;;
#	h)
#	    usage
#	    exit 0;;
	v)
	    number_of_folds="$OPTARG";;
	b|c|d|e|g|h|m|n|p|r|s|t)
	    svm_args="$svm_args -$f '$OPTARG'";;
	w)
	    svm_args="$svm_args -wi '$OPTARG'";;
	q)
	    svm_args="$svm_args $f";;	
    esac
done
shift `expr $OPTIND - 1`

if test -z number_of_folds; then
    eval "${SVM_TRAIN_CMD} $svm_args" "$@"
else
    export TMP_DIR_SVM='/tmp/zzz'; mkdir "$TMP_DIR_SVM" 2>/dev/null || true # `mktemp -d /tmp/svm.XXXXXX`
    echo TMP_DIR_SVM="$TMP_DIR_SVM" 1>&2
    export set_count="$number_of_folds"
    cat "$@" | split_set
    last=`expr $number_of_folds - 1`

    for i in `seq 0 $last` #{1..$number_of_folds}
    do
	eval "${SVM_TRAIN_CMD} $svm_args '$TMP_DIR_SVM/train$i.txt' '$TMP_DIR_SVM/svm$i.bin'" &
    done

    wait

    for i in `seq 0 $last`
    do
	${SVM_PREDICT_CMD} "$TMP_DIR_SVM/test$i.txt" "$TMP_DIR_SVM/svm$i.bin" \
		    "$TMP_DIR_SVM/result${i}.txt" 2> "$TMP_DIR_SVM/predict_stderr${i}"
    done

    wait

    rm -f "$TMP_DIR_SVM/golden_tags" "$TMP_DIR_SVM/result.txt"
    
    for i in `seq 0 $last`
    do
	#	cut -d ' ' -f1 "$TMP_DIR_SVM/train$i.txt" > "$TMP_DIR_SVM/train$i_categ.txt"
	echo "Fold $i statistics"  
	awk '{print $1}' "$TMP_DIR_SVM/test$i.txt" > "$TMP_DIR_SVM/golden_tags${i}"
	precision "$TMP_DIR_SVM/golden_tags${i}" "$TMP_DIR_SVM/result${i}.txt"

	echo ''
	#
	cat "$TMP_DIR_SVM/golden_tags${i}" >> "$TMP_DIR_SVM/golden_tags"
	cat "$TMP_DIR_SVM/result${i}.txt"  >> "$TMP_DIR_SVM/result.txt"
    done

    echo 'Total statistics'
    precision "$TMP_DIR_SVM/golden_tags" "$TMP_DIR_SVM/result.txt"
fi
